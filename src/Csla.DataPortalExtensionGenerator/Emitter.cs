using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using System.Text;

namespace Ossendorf.Csla.DataPortalExtensionGenerator;

internal static class Emitter {
    public static void EmitExtensionClass(SourceProductionContext context, ((ClassForExtensions Class, ImmutableArray<PortalOperationToGenerate> Methods) ClassesAndMethods, GeneratorOptions Options) data) {
        var methods = data.ClassesAndMethods.Methods;
        if (methods.IsDefaultOrEmpty) {
            return;
        }

        context.CancellationToken.ThrowIfCancellationRequested();

        var extensionClass = data.ClassesAndMethods.Class;

        var code = GenerateCode(in extensionClass, in methods, in data.Options, context.CancellationToken);
        var fileName = GetFileName(in extensionClass);

        context.AddSource(fileName, code);
    }

    private static string GenerateCode(in ClassForExtensions extensionClass, in ImmutableArray<PortalOperationToGenerate> methods, in GeneratorOptions options, CancellationToken ct) {
        return new StringBuilder()
            .AppendLine("// <auto-generated />")
            .AppendNullableContext(in options)
            .AppendLine()
            .AppendNamespace(in extensionClass)
            .AppendLine("{")
            .Append("    [global::System.CodeDom.Compiler.GeneratedCode(\"Ossendorf.Csla.DataportalExtensionsGenerator\", \"").Append(GeneratorHelper.VersionString).AppendLine("\")]")
            .AppendLine("    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = \"Generated by the Ossendorf.Csla.DataPortalExtensionsGenerators source generator.\")]")
            .AppendClassDeclaration(in extensionClass)
            .AppendLine("    {")
            .AppendMethodsGroupedByClass(in methods, in options, ct)
            .AppendLine("    }")
            .AppendLine("}")
            .ToString();
    }

    private static string GetFileName(in ClassForExtensions extensionClass) {
        var typeNamespace = extensionClass.Namespace;
        if (!string.IsNullOrWhiteSpace(typeNamespace)) {
            typeNamespace += ".";
        }

        return $"{typeNamespace}{extensionClass.Name}.g.cs";
    }
}